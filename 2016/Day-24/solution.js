//noprotect
const Combinatorics = require('js-combinatorics')

const input
const hvac = input.map(i=>i.split(''));

var distanceLookup = new Map();

const findLoc = (loc) =>{
  for(var i=0;i<hvac.length;i++){
    if(hvac[i].indexOf(loc.toString()) > -1){
      return [i,hvac[i].indexOf(loc.toString())]
    }
  }
}

const getValidMoves = (x,y,previousMoves, queue)=>{
  const positions = [[x + 1, y], [x - 1, y], [x, y + 1], [x, y - 1]];
  return positions.filter(([x, y]) => {
    if (x < 0 || y < 0) return false;
    return hvac[y][x] && hvac[y][x] !== '#' &&  previousMoves.indexOf(x+','+y)<0 &&
      !queue.find(q=>q.x === x && q.y === y);
  });
}

const navigateMaze = (start, end, previousMoves, moves) =>{
  var queue = [];
  queue.push({x:start[1],y:start[0],moves:moves});
  while(queue.length){
    var step = queue.pop();
    if(step.x === end[1] && step.y === end[0]){
      return step.moves;
    }
    previousMoves.push(step.x+','+step.y);
    var validMoves=getValidMoves(step.x,step.y, previousMoves, queue);
    validMoves.forEach(vm=>{
      queue.unshift({x:vm[0],y:vm[1],moves:step.moves+1});
    })
  }
}

for(var i=0;i<8;i++){
  for(var j=0;j<8;j++){
    if(i !== j && !distanceLookup.has(i+'=>'+j)){
      var iPos = findLoc(i);
      var jPos = findLoc(j);
      var steps = navigateMaze([iPos[0],iPos[1]],[jPos[0],jPos[1]],[],0)
      distanceLookup.set(i+'=>'+j,steps)
      distanceLookup.set(j+'=>'+i,steps)
      console.log('From',i,'to',j,steps)
    }
  }
}

const calculateOptimalRoute = (currentDestination, dests)=>{
  if(dests.length){
    return distanceLookup.get(currentDestination+'=>'+dests[0]) + calculateOptimalRoute(dests[0],dests.filter(d=>d !== dests[0]));
  }
  else{
    return 0;
  }
}
 
var firstPart,secondPart;  
Combinatorics.permutation([1,2,3,4,5,6,7]).forEach(combo=>{
  combo.unshift(0)
  var firstResult = calculateOptimalRoute(combo[0],combo.slice(1,combo.length))
  combo.push(0)
  var secondResult = calculateOptimalRoute(combo[0],combo.slice(1,combo.length))
  firstPart = !firstPart || firstResult < firstPart ? firstResult : firstPart; 
  secondPart = !secondPart || secondResult < secondPart ? secondResult : secondPart; 
});

console.log('First part: ', firstPart);
console.log('Second part: ', secondPart);