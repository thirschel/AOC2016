const input

let grid = [];
const SIZE = 1000;
const mid = SIZE / 2;
const puzzleSize = input[0].length;
const s = mid - Math.floor(puzzleSize / 2);

for (let y = 0; y < SIZE; y++) {
  grid[y] = [];
  for (let x = 0; x < SIZE; x++) {
    grid[y][x] = '.';
    if (x >= s && x < s + puzzleSize) {
      if (y >= s && y < s + puzzleSize) {
        grid[y][x] = input[y - s][x - s];
      }
    }
  }
}
const burst = (x,y, dir, grid, infected) =>{
	if(grid[y][x] === '#'){
  	grid[y][x] = '.';
    if(dir === 'U'){
    	x++;
      dir = 'R';
    }
    else if(dir === 'R'){
    	y++;
      dir = 'D';
    }
    else if(dir === 'D'){
    	x--;
      dir = 'L';
    }
    else if(dir === 'L'){
    	y--;
      dir = 'U';
    }
  }
  else{
  	infected++;
    grid[y][x] = '#';
    if(dir === 'U'){
    	x--;
      dir = 'L';
    }
    else if(dir === 'L'){
    	y++;
      dir = 'D';
    }
    else if(dir === 'D'){
    	x++;
      dir = 'R';
    }
    else if(dir === 'R'){
    	y--;
      dir = 'U';
    }
  }
  return {x,y,dir, infected};
}

const evolvedBurst = (x,y, dir, grid, infected) =>{
	if(grid[y][x] === '#'){
  	grid[y][x] = 'F';
    if(dir === 'U'){
      dir = 'R';
    }
    else if(dir === 'R'){
      dir = 'D';
    }
    else if(dir === 'D'){
      dir = 'L';
    }
    else if(dir === 'L'){
      dir = 'U';
    }
  }
  else if(grid[y][x] === '.'){
    grid[y][x] = 'W';
    if(dir === 'U'){
      dir = 'L';
    }
    else if(dir === 'L'){
      dir = 'D';
    }
    else if(dir === 'D'){
      dir = 'R';
    }
    else if(dir === 'R'){
      dir = 'U';
    }
  }
  else if(grid[y][x] === 'W'){
  	infected++;
    grid[y][x] = '#';
  }
  else if(grid[y][x] === 'F'){
    grid[y][x] = '.';
    if(dir === 'U'){
      dir = 'D';
    }
    else if(dir === 'D'){
      dir = 'U';
    }
    else if(dir === 'L'){
      dir = 'R';
    }
    else if(dir === 'R'){
      dir = 'L';
    }
  }
  
	if(dir === 'U'){
    	y--;
	}
	else if(dir === 'D'){
		y++;
	}
	else if(dir === 'L'){
		x--;
	}
	else if(dir === 'R'){
		x++;
	}
  return {x,y,dir,infected};
}

const firstDefense =() =>{
  var dir = 'U';
  var x = SIZE / 2;
  var y = SIZE / 2;
  var infected= 0;
  var virusGrid = JSON.parse(JSON.stringify(grid));
  for(var i=0;i<10000;i++){
    var coords = burst(x,y,dir,virusGrid, infected);
    x = coords.x;
    y = coords.y;
    dir = coords.dir;
    infected = coords.infected;
  }
  return infected;
}

const secondDefense = () =>{
  var dir = 'U';
  var x = SIZE / 2;
  var y = SIZE / 2;
  var infected= 0;
  var virusGrid = JSON.parse(JSON.stringify(grid));
  for(var i=0;i<10000000;i++){
    var coords = evolvedBurst(x,y,dir,virusGrid, infected);
    x = coords.x;
    y = coords.y;
    dir = coords.dir;
    infected = coords.infected;
  }
  return infected;
}

console.log(`First Part: ${firstDefense()}`);
console.log(`Second Part: ${secondDefense()}`);
