const input = ['../.. => ###/.../#..', '#./.. => #../.#./###', '##/.. => #../###/#..', '.#/#. => .#./##./#.#', '##/#. => .#./.../...', '##/## => .../#../#.#', '.../.../... => #.##/#.../..##/.##.', '#../.../... => .#../#..#/###./#.##', '.#./.../... => ..../###./.###/##..', '##./.../... => .###/##../.#.#/..#.', '#.#/.../... => ..#./...#/.##./#.##', '###/.../... => ##.#/..../#.../....', '.#./#../... => .##./..../.##./.###', '##./#../... => .##./##../#.#./#.#.', '..#/#../... => .#../####/##.#/##.#', '#.#/#../... => .##./##.#/#..#/#...', '.##/#../... => .#../.#.#/####/....', '###/#../... => .###/#.#./.#../...#', '.../.#./... => ##.#/####/##../#..#', '#../.#./... => #..#/..##/.###/.##.', '.#./.#./... => #.../#..#/...#/#.#.', '##./.#./... => .#.#/#..#/..#./##.#', '#.#/.#./... => .##./#.#./##../#.##', '###/.#./... => #.../...#/.#../.#.#', '.#./##./... => ####/#.../#.../###.', '##./##./... => ##../##../.#../##..', '..#/##./... => ##.#/####/..##/.##.', '#.#/##./... => .#.#/.##./..../#..#', '.##/##./... => ..../.###/..#./###.', '###/##./... => .###/.##./..../..#.', '.../#.#/... => .###/####/..##/#.#.', '#../#.#/... => .#../.##./..#./....', '.#./#.#/... => ..##/#.##/###./#...', '##./#.#/... => ...#/#..#/#.../##..', '#.#/#.#/... => ####/#.#./####/.#..', '###/#.#/... => #.##/####/..../#.#.', '.../###/... => #..#/.##./.##./.#..', '#../###/... => #..#/...#/#..#/...#', '.#./###/... => ..##/###./..##/#.##', '##./###/... => ###./####/#.../####', '#.#/###/... => ..../#..#/.##./.##.', '###/###/... => .###/#.#./#.#./#...', '..#/.../#.. => #..#/...#/.###/.#.#', '#.#/.../#.. => ...#/.###/..../.#..', '.##/.../#.. => ..##/..##/#.../..#.', '###/.../#.. => ..../..##/#.../.#.#', '.##/#../#.. => ...#/#..#/##../.##.', '###/#../#.. => .##./###./.##./#.#.', '..#/.#./#.. => .##./..#./###./.#..', '#.#/.#./#.. => .#.#/...#/#..#/.#..', '.##/.#./#.. => #.../#.##/.###/.#..', '###/.#./#.. => ##../#.#./#.##/#...', '.##/##./#.. => ..#./##.#/..#./..##', '###/##./#.. => ..##/..#./.##./###.', '#../..#/#.. => ...#/.#.#/..../.#..', '.#./..#/#.. => ..../.#.#/#..#/...#', '##./..#/#.. => #.#./#.##/..#./.###', '#.#/..#/#.. => #.#./...#/.#.#/....', '.##/..#/#.. => .###/.##./..#./....', '###/..#/#.. => .##./###./#.../.###', '#../#.#/#.. => #.../..##/...#/..##', '.#./#.#/#.. => ..##/###./###./..#.', '##./#.#/#.. => ...#/.##./#..#/#.#.', '..#/#.#/#.. => #..#/...#/###./###.', '#.#/#.#/#.. => ####/...#/..#./##..', '.##/#.#/#.. => ..../..#./..../#.##', '###/#.#/#.. => .#../#.#./.###/#...', '#../.##/#.. => .###/####/.#.#/.#..', '.#./.##/#.. => ###./#.#./..../.#..', '##./.##/#.. => #.##/..#./#.#./.##.', '#.#/.##/#.. => ..#./..#./..../..#.', '.##/.##/#.. => #..#/#.##/.#.#/###.', '###/.##/#.. => .###/..../.#.#/....', '#../###/#.. => ###./..#./..../#.##', '.#./###/#.. => ..../##.#/####/####', '##./###/#.. => ..#./##.#/.###/.###', '..#/###/#.. => .###/.#../####/#.##', '#.#/###/#.. => ...#/##../..../.#.#', '.##/###/#.. => #.##/..#./#.../##..', '###/###/#.. => ###./#.##/.###/....', '.#./#.#/.#. => #.#./#.../..#./#.##', '##./#.#/.#. => ####/.##./...#/.##.', '#.#/#.#/.#. => ###./##.#/#.../#..#', '###/#.#/.#. => .###/.#.#/..../...#', '.#./###/.#. => #..#/.###/..#./.##.', '##./###/.#. => .#.#/#.##/.#.#/###.', '#.#/###/.#. => ...#/...#/##.#/....', '###/###/.#. => ####/#.##/##../.#..', '#.#/..#/##. => #.../...#/####/#...', '###/..#/##. => ####/###./.##./.##.', '.##/#.#/##. => .#.#/#.../####/####', '###/#.#/##. => .#../#.#./.#../#.##', '#.#/.##/##. => ##.#/#..#/#.../..##', '###/.##/##. => ####/.#../.##./###.', '.##/###/##. => .#../..#./#..#/.##.', '###/###/##. => ...#/.#../..../..#.', '#.#/.../#.# => #..#/##../#.##/###.', '###/.../#.# => ..##/.#.#/#.#./#.#.', '###/#../#.# => .#.#/###./..../.###', '#.#/.#./#.# => ..##/#.##/#.../####', '###/.#./#.# => ####/###./...#/.###', '###/##./#.# => ..../##../####/.###', '#.#/#.#/#.# => ..../..../.##./####', '###/#.#/#.# => ##../#..#/.#.#/#..#', '#.#/###/#.# => #..#/..../####/#.##', '###/###/#.# => ####/..../.##./.#.#', '###/#.#/### => .#.#/#..#/###./.##.', '###/###/### => ##../#.##/.##./#..#'];

var art = [['.','#','.'],['.','.','#'],['#','#','#']];

const rotate = (arr) => arr[0].map((col, i) => arr.map(row => row[i])).map(i=>i).reverse();
const flip = (arr) => arr.map(r => r.map(i=>i).reverse());
const getArtStr = (arr) => arr.reduce((str,a)=>str+= `${a.join('')}/`,'').slice(0, -1);
const parseInput = (i) => Object.assign({},{pattern:i.split(' => ')[0], enhancement:i.split(' => ')[1]});
const getSquares = (arr) => {
	var squares = [];
	if(arr.length % 3 === 0){
		for(var offset=0; offset < arr.length / 3;offset++){
			  for(var x = 0;x < arr.length / 3; x++){
				var square = [];
				for(var y = offset * 3;y<=(offset * 3) + 2;y++){
					square.push(arr[y].map(i=>i).slice(x*3,3 * (x + 1)));
				}
				squares.push(square);
		}
		}
	}
	else{
		for(var offset = 0;offset < arr.length / 2;offset++){
			for(var x = 0;x < arr.length / 2;x++){
				var square = [];
				for(var y = offset * 2;y<=(offset * 2) + 1;y++){
					square.push(arr[y].map(i=>i).slice(x*2,2 * (x + 1)));
				}
				squares.push(square);
			}
		}
	}
  return squares;
}
const rebuildArt = (squares) => {
	var art = [];
  if(squares.length === 1){
  	return squares[0];
  }
  for(var offset=0; offset < Math.sqrt(squares.length);offset++){
  	for(var r=0;r<squares[0].length;r++){
    	var row = [];
      	for(var s=offset * Math.sqrt(squares.length); s <(offset * Math.sqrt(squares.length)) + (Math.sqrt(squares.length));s++){
        	row = row.concat(squares[s][r]);
        }
        art.push(row);
    }
  }
  return art;
}
const getCombinations = (arr) =>{
	var combinations = [];

	var rotated = arr.map(i=>i),flipped = flip(arr);
	combinations.push(getArtStr(arr));
	combinations.push(getArtStr(flipped));
	for (var i=0;i<3;i++){
		rotated = rotate(rotated);
		flipped = rotate(flipped);
		combinations.push(getArtStr(rotated));
		combinations.push(getArtStr(flipped));
	}
  return combinations;
}

for(var i= 0;i<5;i++){
	squares = getSquares(art);
	squares = squares.map(square=>{
		var combos = getCombinations(square);
		for(var j=0;j<input.length;j++){
      var parsed = parseInput(input[j]);
      if(combos.includes(parsed.pattern)){
        return parsed.enhancement.split('/').map(i=>i.split(''));
      }
		}
    return square;
	});
  art = rebuildArt(squares);
}